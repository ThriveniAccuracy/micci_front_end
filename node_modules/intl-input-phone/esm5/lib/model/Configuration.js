/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ContentOptionsEnum, SortOrderEnum, TooltipOptionsEnum, OutputOptionsEnum } from "./Enums";
import { Injectable } from '@angular/core';
/**
 * Class for configure the dropdown.
 */
var ConfigurationOptions = /** @class */ (function () {
    function ConfigurationOptions() {
        /**
         * Prperty to set the selector for the dropdown.
         * Default : 'IntlPhoneNumber'
         */
        this.SelectorClass = "IntlPhoneNumber";
        /**
         * Property to set which content show in option
         * Default : Flag, CountryPhoneCode
         */
        this.OptionTextTypes = [
            ContentOptionsEnum.Flag,
            ContentOptionsEnum.CountryPhoneCode
        ];
        /**
         * Property to set the tooltip text
         * Default : Country Name
         */
        this.ToolTipText = TooltipOptionsEnum.CountryName;
        /**
         * Property to set whether tooltip is show or not.
         * Default : true
         */
        this.IsShowToolTip = true;
        /**
         * Property to set whether user want search option or not.
         * Default : true
         */
        this.IsShowSearchOption = true;
        /**
         * Property to set the sort order of country list to be rendered.
         * Default : CountryISOCode
         */
        this.SortBy = SortOrderEnum.CountryISOCode;
        /**
         * Property to set whether show all other country in dropdown as well or not, when specify custom country list in module.
         * Default : true
         */
        this.IsShowAllOtherCountry = true;
        /**
         * Property to set in which format user want the output when fill the input correctly.
         * Default : NumberWithCountryCode
         */
        this.OutputFormat = OutputOptionsEnum.NumberWithCountryCode;
    }
    ConfigurationOptions.decorators = [
        { type: Injectable }
    ];
    return ConfigurationOptions;
}());
export { ConfigurationOptions };
if (false) {
    /**
     * Prperty to set the selector for the dropdown.
     * Default : 'IntlPhoneNumber'
     * @type {?}
     */
    ConfigurationOptions.prototype.SelectorClass;
    /**
     * Property to set which content show in option
     * Default : Flag, CountryPhoneCode
     * @type {?}
     */
    ConfigurationOptions.prototype.OptionTextTypes;
    /**
     * Property to set the tooltip text
     * Default : Country Name
     * @type {?}
     */
    ConfigurationOptions.prototype.ToolTipText;
    /**
     * Property to set whether tooltip is show or not.
     * Default : true
     * @type {?}
     */
    ConfigurationOptions.prototype.IsShowToolTip;
    /**
     * Property to set whether user want search option or not.
     * Default : true
     * @type {?}
     */
    ConfigurationOptions.prototype.IsShowSearchOption;
    /**
     * Property to set the sort order of country list to be rendered.
     * Default : CountryISOCode
     * @type {?}
     */
    ConfigurationOptions.prototype.SortBy;
    /**
     * Property to set whether show all other country in dropdown as well or not, when specify custom country list in module.
     * Default : true
     * @type {?}
     */
    ConfigurationOptions.prototype.IsShowAllOtherCountry;
    /**
     * Property to set in which format user want the output when fill the input correctly.
     * Default : NumberWithCountryCode
     * @type {?}
     */
    ConfigurationOptions.prototype.OutputFormat;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29uZmlndXJhdGlvbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2ludGwtaW5wdXQtcGhvbmUvIiwic291cmNlcyI6WyJsaWIvbW9kZWwvQ29uZmlndXJhdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLGtCQUFrQixFQUFFLGFBQWEsRUFBRSxrQkFBa0IsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNuRyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7O0FBSzNDO0lBQUE7Ozs7O1FBT1Msa0JBQWEsR0FBWSxpQkFBaUIsQ0FBQzs7Ozs7UUFNM0Msb0JBQWUsR0FBeUI7WUFDN0Msa0JBQWtCLENBQUMsSUFBSTtZQUN2QixrQkFBa0IsQ0FBQyxnQkFBZ0I7U0FDcEMsQ0FBQzs7Ozs7UUFNSyxnQkFBVyxHQUF1QixrQkFBa0IsQ0FBQyxXQUFXLENBQUM7Ozs7O1FBTWpFLGtCQUFhLEdBQWEsSUFBSSxDQUFDOzs7OztRQU0vQix1QkFBa0IsR0FBYSxJQUFJLENBQUM7Ozs7O1FBTXBDLFdBQU0sR0FBbUIsYUFBYSxDQUFDLGNBQWMsQ0FBQzs7Ozs7UUFPdEQsMEJBQXFCLEdBQWEsSUFBSSxDQUFDOzs7OztRQU12QyxpQkFBWSxHQUF1QixpQkFBaUIsQ0FBQyxxQkFBcUIsQ0FBQztJQUVwRixDQUFDOztnQkF2REEsVUFBVTs7SUF1RFgsMkJBQUM7Q0FBQSxBQXZERCxJQXVEQztTQXREWSxvQkFBb0I7Ozs7Ozs7SUFNL0IsNkNBQWtEOzs7Ozs7SUFNbEQsK0NBR0U7Ozs7OztJQU1GLDJDQUF3RTs7Ozs7O0lBTXhFLDZDQUFzQzs7Ozs7O0lBTXRDLGtEQUEyQzs7Ozs7O0lBTTNDLHNDQUE2RDs7Ozs7O0lBTzdELHFEQUE4Qzs7Ozs7O0lBTTlDLDRDQUFrRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnRlbnRPcHRpb25zRW51bSwgU29ydE9yZGVyRW51bSwgVG9vbHRpcE9wdGlvbnNFbnVtLCBPdXRwdXRPcHRpb25zRW51bSB9IGZyb20gXCIuL0VudW1zXCI7XHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbi8qKlxyXG4gKiBDbGFzcyBmb3IgY29uZmlndXJlIHRoZSBkcm9wZG93bi5cclxuICovXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIENvbmZpZ3VyYXRpb25PcHRpb25zIHtcclxuXHJcbiAgLyoqXHJcbiAgICogUHJwZXJ0eSB0byBzZXQgdGhlIHNlbGVjdG9yIGZvciB0aGUgZHJvcGRvd24uXHJcbiAgICogRGVmYXVsdCA6ICdJbnRsUGhvbmVOdW1iZXInXHJcbiAgICovXHJcbiAgcHVibGljIFNlbGVjdG9yQ2xhc3MgOiBzdHJpbmcgPSBcIkludGxQaG9uZU51bWJlclwiO1xyXG5cclxuICAvKipcclxuICAgKiBQcm9wZXJ0eSB0byBzZXQgd2hpY2ggY29udGVudCBzaG93IGluIG9wdGlvblxyXG4gICAqIERlZmF1bHQgOiBGbGFnLCBDb3VudHJ5UGhvbmVDb2RlXHJcbiAgICovXHJcbiAgcHVibGljIE9wdGlvblRleHRUeXBlczogQ29udGVudE9wdGlvbnNFbnVtW10gPSBbXHJcbiAgICBDb250ZW50T3B0aW9uc0VudW0uRmxhZyxcclxuICAgIENvbnRlbnRPcHRpb25zRW51bS5Db3VudHJ5UGhvbmVDb2RlXHJcbiAgXTtcclxuXHJcbiAgLyoqXHJcbiAgICogUHJvcGVydHkgdG8gc2V0IHRoZSB0b29sdGlwIHRleHRcclxuICAgKiBEZWZhdWx0IDogQ291bnRyeSBOYW1lXHJcbiAgICovXHJcbiAgcHVibGljIFRvb2xUaXBUZXh0OiBUb29sdGlwT3B0aW9uc0VudW0gPSBUb29sdGlwT3B0aW9uc0VudW0uQ291bnRyeU5hbWU7XHJcblxyXG4gIC8qKlxyXG4gICAqIFByb3BlcnR5IHRvIHNldCB3aGV0aGVyIHRvb2x0aXAgaXMgc2hvdyBvciBub3QuXHJcbiAgICogRGVmYXVsdCA6IHRydWVcclxuICAgKi9cclxuICBwdWJsaWMgSXNTaG93VG9vbFRpcCA6IGJvb2xlYW4gPSB0cnVlO1xyXG5cclxuICAvKipcclxuICAgKiBQcm9wZXJ0eSB0byBzZXQgd2hldGhlciB1c2VyIHdhbnQgc2VhcmNoIG9wdGlvbiBvciBub3QuXHJcbiAgICogRGVmYXVsdCA6IHRydWVcclxuICAgKi9cclxuICBwdWJsaWMgSXNTaG93U2VhcmNoT3B0aW9uIDogYm9vbGVhbiA9IHRydWU7XHJcblxyXG4gIC8qKlxyXG4gICAqIFByb3BlcnR5IHRvIHNldCB0aGUgc29ydCBvcmRlciBvZiBjb3VudHJ5IGxpc3QgdG8gYmUgcmVuZGVyZWQuXHJcbiAgICogRGVmYXVsdCA6IENvdW50cnlJU09Db2RlXHJcbiAgICovXHJcbiAgcHVibGljIFNvcnRCeSA6IFNvcnRPcmRlckVudW0gPSBTb3J0T3JkZXJFbnVtLkNvdW50cnlJU09Db2RlO1xyXG5cclxuXHJcbiAgLyoqXHJcbiAgICogUHJvcGVydHkgdG8gc2V0IHdoZXRoZXIgc2hvdyBhbGwgb3RoZXIgY291bnRyeSBpbiBkcm9wZG93biBhcyB3ZWxsIG9yIG5vdCwgd2hlbiBzcGVjaWZ5IGN1c3RvbSBjb3VudHJ5IGxpc3QgaW4gbW9kdWxlLlxyXG4gICAqIERlZmF1bHQgOiB0cnVlXHJcbiAgICovXHJcbiAgcHVibGljIElzU2hvd0FsbE90aGVyQ291bnRyeSA6IGJvb2xlYW4gPSB0cnVlO1xyXG5cclxuICAvKipcclxuICAgKiBQcm9wZXJ0eSB0byBzZXQgaW4gd2hpY2ggZm9ybWF0IHVzZXIgd2FudCB0aGUgb3V0cHV0IHdoZW4gZmlsbCB0aGUgaW5wdXQgY29ycmVjdGx5LlxyXG4gICAqIERlZmF1bHQgOiBOdW1iZXJXaXRoQ291bnRyeUNvZGVcclxuICAgKi9cclxuICBwdWJsaWMgT3V0cHV0Rm9ybWF0IDogT3V0cHV0T3B0aW9uc0VudW0gPSBPdXRwdXRPcHRpb25zRW51bS5OdW1iZXJXaXRoQ291bnRyeUNvZGU7XHJcblxyXG59XHJcbiJdfQ==