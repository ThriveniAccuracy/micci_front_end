import { toggleMark } from 'prosemirror-commands';
import schema from '../../../schema';
import isNodeActive from '../../helpers/isNodeActive';
import isMarkActive from '../../helpers/isMarkActive';
import { toggleList, toggleBlockType } from '../../commands';
import { getIconSvg } from '../../../utils/icons';
import flatDeep from '../../../utils/flatDeep';
import menuItemsMeta from './meta';
var MENU_ITEM_CLASSNAME = 'NgxEditor-MenuItem';
var DROPDOWN_ITEMS = new Map();
DROPDOWN_ITEMS.set('heading', ['h1', 'h2', 'h3', 'h4', 'h5', 'h6']);
var isListItem = function (type) {
    return (type === schema.nodes.list_item ||
        type === schema.nodes.ordered_list ||
        type === schema.nodes.bullet_list);
};
var ɵ0 = isListItem;
var DropDownView = /** @class */ (function () {
    function DropDownView(dropdownGroup, dropdownFields, editorView, options) {
        this.updates = [];
        this.dropdownGroup = dropdownGroup;
        this.dropdownFields = dropdownFields;
        this.editorView = editorView;
        this.options = options;
    }
    DropDownView.prototype.getWrapperDom = function () {
        var _this = this;
        var isDropdownOpen = false;
        var dropdownWrapper = document.createElement('div');
        var labels = this.options.labels;
        dropdownWrapper.classList.add(MENU_ITEM_CLASSNAME);
        dropdownWrapper.classList.add(MENU_ITEM_CLASSNAME + "__Dropdown-Wrapper");
        // create dropdown content
        var dropdown = document.createElement('div');
        dropdown.classList.add(MENU_ITEM_CLASSNAME + "__Dropdown");
        var dropdownText = document.createElement('div');
        dropdownText.classList.add(MENU_ITEM_CLASSNAME + "__Dropdown-Text");
        dropdownText.textContent = labels[this.dropdownGroup];
        var dropdownIcon = document.createElement('div');
        dropdownIcon.classList.add(MENU_ITEM_CLASSNAME + "__Dropdown-Icon");
        dropdownIcon.innerHTML = getIconSvg('arrow_drop_down');
        dropdown.appendChild(dropdownText);
        dropdown.appendChild(dropdownIcon);
        var dropdownOpenClassName = MENU_ITEM_CLASSNAME + "__Dropdown-Wrapper-Open";
        var mouseDownHandler = function (e) {
            e.preventDefault();
            if (!dropdownWrapper.contains(e.target)) {
                closeDropdown();
            }
        };
        var openDropdown = function () {
            dropdownWrapper.classList.add(dropdownOpenClassName);
            isDropdownOpen = true;
            window.addEventListener('mousedown', mouseDownHandler);
        };
        var closeDropdown = function () {
            dropdownWrapper.classList.remove(dropdownOpenClassName);
            isDropdownOpen = false;
            window.removeEventListener('mousedown', mouseDownHandler);
        };
        dropdown.addEventListener('click', function (e) {
            e.preventDefault();
            if (!isDropdownOpen) {
                openDropdown();
            }
            else {
                closeDropdown();
            }
        });
        // create dropdown list
        var dropdownList = document.createElement('div');
        dropdownList.classList.add(MENU_ITEM_CLASSNAME + "__Dropdown-Menu");
        this.dropdownFields.forEach(function (dropdownItem) {
            var menuItem = menuItemsMeta[dropdownItem];
            var text = labels[menuItem.key];
            if (menuItem.key === 'heading') {
                text += " " + menuItem.attrs.level;
            }
            var spec = {
                classNames: [
                    MENU_ITEM_CLASSNAME + "__Dropdown-Item"
                ],
                textContent: text,
                attrs: {
                    title: text
                }
            };
            var menuItemView = new MenuItemView(menuItem, _this.editorView, spec);
            var _a = menuItemView.render(), update = _a.update, dom = _a.dom;
            // remove open class once clicked on dropdown value
            dom.addEventListener('click', function (e) {
                e.preventDefault();
                closeDropdown();
            });
            // wrapper to execute when update is called
            var dropUpdate = function (state) {
                update(state);
                var selectedClass = MENU_ITEM_CLASSNAME + "__Dropdown-Wrapper-Selected";
                // update the dropdown content heading when a class is selected
                var activeEl = dropdownList.getElementsByClassName(MENU_ITEM_CLASSNAME + "__Active");
                if (activeEl.length) {
                    var el = activeEl[0];
                    dropdownText.textContent = el.textContent;
                    dropdownWrapper.classList.add(selectedClass);
                }
                else {
                    // restore default value
                    dropdownText.textContent = labels[_this.dropdownGroup];
                    dropdownWrapper.classList.remove(selectedClass);
                }
            };
            dropdownList.appendChild(dom);
            _this.updates.push(dropUpdate);
        });
        dropdownWrapper.appendChild(dropdown);
        dropdownWrapper.appendChild(dropdownList);
        return dropdownWrapper;
    };
    DropDownView.prototype.render = function () {
        this.dom = this.getWrapperDom();
        return {
            dom: this.dom,
            updates: this.updates
        };
    };
    return DropDownView;
}());
var MenuItemView = /** @class */ (function () {
    function MenuItemView(menuItem, editorView, spec) {
        this.menuItem = menuItem;
        this.editorView = editorView;
        this.spec = spec;
    }
    MenuItemView.prototype.render = function () {
        var _this = this;
        var dom = this.dom = this.getDom();
        this.setupCommandListeners();
        var update = function (state) {
            var menuItem = _this.menuItem;
            var isActive = false;
            if (menuItem.type === 'mark') {
                var type = schema.marks[menuItem.key];
                isActive = isMarkActive(state, type);
            }
            if (menuItem.type === 'node') {
                var type = schema.nodes[menuItem.key];
                isActive = isNodeActive(state, type, menuItem.attrs);
            }
            dom.classList.toggle(MENU_ITEM_CLASSNAME + "__Active", isActive);
        };
        return {
            dom: dom,
            update: update
        };
    };
    MenuItemView.prototype.getDom = function () {
        var div = document.createElement('div');
        if (this.spec.classNames) {
            this.spec.classNames.forEach(function (className) {
                div.classList.add(className);
            });
        }
        if (this.spec.attrs) {
            Object.entries(this.spec.attrs).forEach(function (obj) {
                div.setAttribute(obj[0], obj[1]);
            });
        }
        if (this.spec.innerHTML) {
            div.innerHTML = this.spec.innerHTML;
        }
        if (this.spec.textContent) {
            div.innerHTML = this.spec.textContent;
        }
        return div;
    };
    MenuItemView.prototype.setupCommandListeners = function () {
        var _this = this;
        this.dom.addEventListener('mousedown', function (e) {
            e.preventDefault();
            // don't execute if not left click
            if (e.buttons !== 1) {
                return;
            }
            if (_this.menuItem.type === 'mark') {
                var command = toggleMark(schema.marks[_this.menuItem.key]);
                command(_this.editorView.state, _this.editorView.dispatch);
                return;
            }
            if (_this.menuItem.type === 'node') {
                var type = schema.nodes[_this.menuItem.key];
                if (isListItem(type)) {
                    var command = toggleList(type, schema.nodes.list_item);
                    command(_this.editorView.state, _this.editorView.dispatch);
                    return;
                }
                if (type === schema.nodes.heading) {
                    var command = toggleBlockType(type, schema.nodes.paragraph, { level: _this.menuItem.attrs.level });
                    command(_this.editorView.state, _this.editorView.dispatch);
                    return;
                }
            }
        });
    };
    return MenuItemView;
}());
var getSeperatorDom = function () {
    var div = document.createElement('div');
    div.className = MENU_ITEM_CLASSNAME + "__Seperator";
    return div;
};
var ɵ1 = getSeperatorDom;
export var renderMenu = function (options, editorView, menuDom) {
    var updates = [];
    var toolbar = options.toolbar;
    toolbar.forEach(function (group, toolbarIndex) {
        var isLastMenuGroup = toolbar.length - 1 === toolbarIndex;
        group.forEach(function (toolbarItem, menuIndex) {
            var isLastMenuItem = group.length - 1 === menuIndex;
            // render dropdown
            if (typeof toolbarItem === 'object') {
                Object.keys(toolbarItem).forEach(function (dropdownGroup) {
                    if (DROPDOWN_ITEMS.has(dropdownGroup)) {
                        var dropdown = toolbarItem[dropdownGroup];
                        var dropdownView = new DropDownView(dropdownGroup, dropdown, editorView, options);
                        var rendered = dropdownView.render();
                        updates.push(rendered.updates);
                        menuDom.appendChild(rendered.dom);
                    }
                    else {
                        console.warn('Unkown dropdown group:', dropdownGroup);
                    }
                });
            }
            // render Icons
            if (typeof toolbarItem === 'string') {
                var menuItem = menuItemsMeta[toolbarItem];
                var labels = options.labels;
                if (menuItem) {
                    var spec = {
                        classNames: [
                            MENU_ITEM_CLASSNAME,
                            MENU_ITEM_CLASSNAME + "__Icon",
                            MENU_ITEM_CLASSNAME + "__" + menuItem.key
                        ],
                        innerHTML: getIconSvg(menuItem.icon),
                        attrs: {
                            title: labels[menuItem.i18nKey]
                        }
                    };
                    var menuItemView = new MenuItemView(menuItem, editorView, spec);
                    var _a = menuItemView.render(), update = _a.update, dom = _a.dom;
                    menuDom.appendChild(dom);
                    updates.push(update);
                }
            }
            if (isLastMenuItem && !isLastMenuGroup) {
                var seperatorDom = getSeperatorDom();
                menuDom.appendChild(seperatorDom);
            }
        });
    });
    var combinedUpdates = flatDeep(updates, Infinity);
    return {
        update: function (state) {
            combinedUpdates.forEach(function (update) {
                update(state);
            });
        }
    };
};
export { ɵ0, ɵ1 };
//# sourceMappingURL=data:application/json;base64,