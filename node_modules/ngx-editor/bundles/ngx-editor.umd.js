(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('prosemirror-state'), require('prosemirror-view'), require('prosemirror-commands'), require('prosemirror-model'), require('prosemirror-schema-basic'), require('prosemirror-schema-list'), require('prosemirror-utils')) :
    typeof define === 'function' && define.amd ? define('ngx-editor', ['exports', '@angular/core', '@angular/forms', 'prosemirror-state', 'prosemirror-view', 'prosemirror-commands', 'prosemirror-model', 'prosemirror-schema-basic', 'prosemirror-schema-list', 'prosemirror-utils'], factory) :
    (global = global || self, factory(global['ngx-editor'] = {}, global.ng.core, global.ng.forms, global.prosemirrorState, global.prosemirrorView, global.prosemirrorCommands, global.prosemirrorModel, global.prosemirrorSchemaBasic, global.prosemirrorSchemaList, global.prosemirrorUtils));
}(this, (function (exports, core, forms, prosemirrorState, prosemirrorView, prosemirrorCommands, prosemirrorModel, prosemirrorSchemaBasic, prosemirrorSchemaList, prosemirrorUtils) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }

    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var listGroup = 'block';
    var listItem = Object.assign({}, prosemirrorSchemaList.listItem, { content: 'paragraph block*' });
    var orderedList = Object.assign({}, prosemirrorSchemaList.orderedList, { content: 'list_item+', group: listGroup });
    var bulletList = Object.assign({}, prosemirrorSchemaList.bulletList, { content: 'list_item+', group: listGroup });
    var nodes = Object.assign({}, prosemirrorSchemaBasic.nodes, {
        list_item: listItem,
        ordered_list: orderedList,
        bullet_list: bulletList
    });
    var schema = new prosemirrorModel.Schema({
        marks: prosemirrorSchemaBasic.marks,
        nodes: nodes
    });

    var isNodeActive = function (state, type, attrs) {
        if (attrs === void 0) { attrs = {}; }
        var _a = state.selection, $from = _a.$from, to = _a.to;
        var predicate = function (n) { return n.type === type; };
        var node = prosemirrorUtils.findSelectedNodeOfType(type)(state.selection) || prosemirrorUtils.findParentNode(predicate)(state.selection);
        if (!Object.entries(attrs).length || !node) {
            return !!node;
        }
        // check if heading is active
        return to <= $from.end() && $from.parent.hasMarkup(type, attrs);
    };

    var isMarkActive = function (state, type) {
        var _a = state.selection, from = _a.from, $from = _a.$from, to = _a.to, empty = _a.empty;
        if (empty) {
            return !!type.isInSet(state.storedMarks || $from.marks());
        }
        else {
            return state.doc.rangeHasMark(from, to, type);
        }
    };

    var toggleBlockType = function (type, toggleType, attrs) {
        if (attrs === void 0) { attrs = {}; }
        return function (state, dispatch) {
            var isActive = isNodeActive(state, type, attrs);
            if (isActive) {
                return prosemirrorCommands.setBlockType(toggleType)(state, dispatch);
            }
            return prosemirrorCommands.setBlockType(type, attrs)(state, dispatch);
        };
    };

    var toggleList = function (type, itemType) {
        return function (state, dispatch) {
            var isActive = isNodeActive(state, type);
            if (isActive) {
                return prosemirrorSchemaList.liftListItem(itemType)(state, dispatch);
            }
            return prosemirrorSchemaList.wrapInList(type)(state, dispatch);
        };
    };

    /* tslint:disable */
    var bold = "\n  <path d=\"M15.6 10.79c.97-.67 1.65-1.77 1.65-2.79 0-2.26-1.75-4-4-4H7v14h7.04c2.09 0 3.71-1.7 3.71-3.79 0-1.52-.86-2.82-2.15-3.42zM10 6.5h3c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5h-3v-3zm3.5 9H10v-3h3.5c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5z\" />\n  <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n";

    var italic = "\n  <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n  <path d=\"M10 4v3h2.21l-3.42 8H6v3h8v-3h-2.21l3.42-8H18V4z\" />\n";

    var code = "\n<path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n<path d=\"M9.4 16.6L4.8 12l4.6-4.6L8 6l-6 6 6 6 1.4-1.4zm5.2 0l4.6-4.6-4.6-4.6L16 6l6 6-6 6-1.4-1.4z\"/>\n";

    var orderedList$1 = "\n<path d=\"M2 17h2v.5H3v1h1v.5H2v1h3v-4H2v1zm1-9h1V4H2v1h1v3zm-1 3h1.8L2 13.1v.9h3v-1H3.2L5 10.9V10H2v1zm5-6v2h14V5H7zm0 14h14v-2H7v2zm0-6h14v-2H7v2z\"/>\n<path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n";

    var bulletList$1 = "\n<path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n<path d=\"M4 10.5c-.83 0-1.5.67-1.5 1.5s.67 1.5 1.5 1.5 1.5-.67 1.5-1.5-.67-1.5-1.5-1.5zm0-6c-.83 0-1.5.67-1.5 1.5S3.17 7.5 4 7.5 5.5 6.83 5.5 6 4.83 4.5 4 4.5zm0 12c-.83 0-1.5.68-1.5 1.5s.68 1.5 1.5 1.5 1.5-.68 1.5-1.5-.67-1.5-1.5-1.5zM7 19h14v-2H7v2zm0-6h14v-2H7v2zm0-8v2h14V5H7z\"/>\n";

    var arrowDropDown = "\n<path d=\"M7 10l5 5 5-5z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n";

    // Icons source: https://material.io/
    var DEFAULT_ICON_HEIGHT = 20;
    var DEFAULT_ICON_WIDTH = 20;
    var icons = {
        bold: bold,
        italic: italic,
        code: code,
        ordered_list: orderedList$1,
        bullet_list: bulletList$1,
        arrow_drop_down: arrowDropDown
    };
    // Helper function to create menu icons
    function getIconSvg(name, width, height) {
        if (width === void 0) { width = DEFAULT_ICON_WIDTH; }
        if (height === void 0) { height = DEFAULT_ICON_HEIGHT; }
        var path = icons[name] || '<path></path>';
        return "\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 24 24\"\n    fill=\"black\"\n    height=" + height + "\n    width=" + width + "\n  >\n    " + path + "\n  </svg>\n  ";
    }

    var flatDeep = function (arr, d) {
        if (d === void 0) { d = 1; }
        return d > 0
            ? arr.reduce(function (acc, val) { return acc.concat(Array.isArray(val) ? flatDeep(val, d - 1) : val); }, [])
            : arr.slice();
    };
    var ɵ0 = flatDeep;

    var menuItemsMeta = {
        bold: {
            key: 'strong',
            i18nKey: 'bold',
            icon: 'bold',
            type: 'mark',
        },
        italic: {
            key: 'em',
            i18nKey: 'italics',
            icon: 'italic',
            type: 'mark',
        },
        code: {
            key: 'code',
            i18nKey: 'code',
            icon: 'code',
            type: 'mark',
        },
        ordered_list: {
            key: 'ordered_list',
            i18nKey: 'ordered_list',
            icon: 'ordered_list',
            type: 'node',
        },
        bullet_list: {
            key: 'bullet_list',
            i18nKey: 'bullet_list',
            icon: 'bullet_list',
            type: 'node',
        },
        h1: {
            key: 'heading',
            i18nKey: 'heading',
            attrs: {
                level: 1,
            },
            type: 'node'
        },
        h2: {
            key: 'heading',
            i18nKey: 'heading',
            attrs: {
                level: 2,
            },
            type: 'node'
        },
        h3: {
            key: 'heading',
            i18nKey: 'heading',
            attrs: {
                level: 3,
            },
            type: 'node'
        },
        h4: {
            key: 'heading',
            i18nKey: 'heading',
            attrs: {
                level: 4,
            },
            type: 'node'
        },
        h5: {
            key: 'heading',
            i18nKey: 'heading',
            attrs: {
                level: 5,
            },
            type: 'node'
        },
        h6: {
            key: 'heading',
            i18nKey: 'heading',
            attrs: {
                level: 6,
            },
            type: 'node'
        }
    };

    var MENU_ITEM_CLASSNAME = 'NgxEditor-MenuItem';
    var DROPDOWN_ITEMS = new Map();
    DROPDOWN_ITEMS.set('heading', ['h1', 'h2', 'h3', 'h4', 'h5', 'h6']);
    var isListItem = function (type) {
        return (type === schema.nodes.list_item ||
            type === schema.nodes.ordered_list ||
            type === schema.nodes.bullet_list);
    };
    var ɵ0$1 = isListItem;
    var DropDownView = /** @class */ (function () {
        function DropDownView(dropdownGroup, dropdownFields, editorView, options) {
            this.updates = [];
            this.dropdownGroup = dropdownGroup;
            this.dropdownFields = dropdownFields;
            this.editorView = editorView;
            this.options = options;
        }
        DropDownView.prototype.getWrapperDom = function () {
            var _this = this;
            var isDropdownOpen = false;
            var dropdownWrapper = document.createElement('div');
            var labels = this.options.labels;
            dropdownWrapper.classList.add(MENU_ITEM_CLASSNAME);
            dropdownWrapper.classList.add(MENU_ITEM_CLASSNAME + "__Dropdown-Wrapper");
            // create dropdown content
            var dropdown = document.createElement('div');
            dropdown.classList.add(MENU_ITEM_CLASSNAME + "__Dropdown");
            var dropdownText = document.createElement('div');
            dropdownText.classList.add(MENU_ITEM_CLASSNAME + "__Dropdown-Text");
            dropdownText.textContent = labels[this.dropdownGroup];
            var dropdownIcon = document.createElement('div');
            dropdownIcon.classList.add(MENU_ITEM_CLASSNAME + "__Dropdown-Icon");
            dropdownIcon.innerHTML = getIconSvg('arrow_drop_down');
            dropdown.appendChild(dropdownText);
            dropdown.appendChild(dropdownIcon);
            var dropdownOpenClassName = MENU_ITEM_CLASSNAME + "__Dropdown-Wrapper-Open";
            var mouseDownHandler = function (e) {
                e.preventDefault();
                if (!dropdownWrapper.contains(e.target)) {
                    closeDropdown();
                }
            };
            var openDropdown = function () {
                dropdownWrapper.classList.add(dropdownOpenClassName);
                isDropdownOpen = true;
                window.addEventListener('mousedown', mouseDownHandler);
            };
            var closeDropdown = function () {
                dropdownWrapper.classList.remove(dropdownOpenClassName);
                isDropdownOpen = false;
                window.removeEventListener('mousedown', mouseDownHandler);
            };
            dropdown.addEventListener('click', function (e) {
                e.preventDefault();
                if (!isDropdownOpen) {
                    openDropdown();
                }
                else {
                    closeDropdown();
                }
            });
            // create dropdown list
            var dropdownList = document.createElement('div');
            dropdownList.classList.add(MENU_ITEM_CLASSNAME + "__Dropdown-Menu");
            this.dropdownFields.forEach(function (dropdownItem) {
                var menuItem = menuItemsMeta[dropdownItem];
                var text = labels[menuItem.key];
                if (menuItem.key === 'heading') {
                    text += " " + menuItem.attrs.level;
                }
                var spec = {
                    classNames: [
                        MENU_ITEM_CLASSNAME + "__Dropdown-Item"
                    ],
                    textContent: text,
                    attrs: {
                        title: text
                    }
                };
                var menuItemView = new MenuItemView(menuItem, _this.editorView, spec);
                var _a = menuItemView.render(), update = _a.update, dom = _a.dom;
                // remove open class once clicked on dropdown value
                dom.addEventListener('click', function (e) {
                    e.preventDefault();
                    closeDropdown();
                });
                // wrapper to execute when update is called
                var dropUpdate = function (state) {
                    update(state);
                    var selectedClass = MENU_ITEM_CLASSNAME + "__Dropdown-Wrapper-Selected";
                    // update the dropdown content heading when a class is selected
                    var activeEl = dropdownList.getElementsByClassName(MENU_ITEM_CLASSNAME + "__Active");
                    if (activeEl.length) {
                        var el = activeEl[0];
                        dropdownText.textContent = el.textContent;
                        dropdownWrapper.classList.add(selectedClass);
                    }
                    else {
                        // restore default value
                        dropdownText.textContent = labels[_this.dropdownGroup];
                        dropdownWrapper.classList.remove(selectedClass);
                    }
                };
                dropdownList.appendChild(dom);
                _this.updates.push(dropUpdate);
            });
            dropdownWrapper.appendChild(dropdown);
            dropdownWrapper.appendChild(dropdownList);
            return dropdownWrapper;
        };
        DropDownView.prototype.render = function () {
            this.dom = this.getWrapperDom();
            return {
                dom: this.dom,
                updates: this.updates
            };
        };
        return DropDownView;
    }());
    var MenuItemView = /** @class */ (function () {
        function MenuItemView(menuItem, editorView, spec) {
            this.menuItem = menuItem;
            this.editorView = editorView;
            this.spec = spec;
        }
        MenuItemView.prototype.render = function () {
            var _this = this;
            var dom = this.dom = this.getDom();
            this.setupCommandListeners();
            var update = function (state) {
                var menuItem = _this.menuItem;
                var isActive = false;
                if (menuItem.type === 'mark') {
                    var type = schema.marks[menuItem.key];
                    isActive = isMarkActive(state, type);
                }
                if (menuItem.type === 'node') {
                    var type = schema.nodes[menuItem.key];
                    isActive = isNodeActive(state, type, menuItem.attrs);
                }
                dom.classList.toggle(MENU_ITEM_CLASSNAME + "__Active", isActive);
            };
            return {
                dom: dom,
                update: update
            };
        };
        MenuItemView.prototype.getDom = function () {
            var div = document.createElement('div');
            if (this.spec.classNames) {
                this.spec.classNames.forEach(function (className) {
                    div.classList.add(className);
                });
            }
            if (this.spec.attrs) {
                Object.entries(this.spec.attrs).forEach(function (obj) {
                    div.setAttribute(obj[0], obj[1]);
                });
            }
            if (this.spec.innerHTML) {
                div.innerHTML = this.spec.innerHTML;
            }
            if (this.spec.textContent) {
                div.innerHTML = this.spec.textContent;
            }
            return div;
        };
        MenuItemView.prototype.setupCommandListeners = function () {
            var _this = this;
            this.dom.addEventListener('mousedown', function (e) {
                e.preventDefault();
                // don't execute if not left click
                if (e.buttons !== 1) {
                    return;
                }
                if (_this.menuItem.type === 'mark') {
                    var command = prosemirrorCommands.toggleMark(schema.marks[_this.menuItem.key]);
                    command(_this.editorView.state, _this.editorView.dispatch);
                    return;
                }
                if (_this.menuItem.type === 'node') {
                    var type = schema.nodes[_this.menuItem.key];
                    if (isListItem(type)) {
                        var command = toggleList(type, schema.nodes.list_item);
                        command(_this.editorView.state, _this.editorView.dispatch);
                        return;
                    }
                    if (type === schema.nodes.heading) {
                        var command = toggleBlockType(type, schema.nodes.paragraph, { level: _this.menuItem.attrs.level });
                        command(_this.editorView.state, _this.editorView.dispatch);
                        return;
                    }
                }
            });
        };
        return MenuItemView;
    }());
    var getSeperatorDom = function () {
        var div = document.createElement('div');
        div.className = MENU_ITEM_CLASSNAME + "__Seperator";
        return div;
    };
    var ɵ1 = getSeperatorDom;
    var renderMenu = function (options, editorView, menuDom) {
        var updates = [];
        var toolbar = options.toolbar;
        toolbar.forEach(function (group, toolbarIndex) {
            var isLastMenuGroup = toolbar.length - 1 === toolbarIndex;
            group.forEach(function (toolbarItem, menuIndex) {
                var isLastMenuItem = group.length - 1 === menuIndex;
                // render dropdown
                if (typeof toolbarItem === 'object') {
                    Object.keys(toolbarItem).forEach(function (dropdownGroup) {
                        if (DROPDOWN_ITEMS.has(dropdownGroup)) {
                            var dropdown = toolbarItem[dropdownGroup];
                            var dropdownView = new DropDownView(dropdownGroup, dropdown, editorView, options);
                            var rendered = dropdownView.render();
                            updates.push(rendered.updates);
                            menuDom.appendChild(rendered.dom);
                        }
                        else {
                            console.warn('Unkown dropdown group:', dropdownGroup);
                        }
                    });
                }
                // render Icons
                if (typeof toolbarItem === 'string') {
                    var menuItem = menuItemsMeta[toolbarItem];
                    var labels = options.labels;
                    if (menuItem) {
                        var spec = {
                            classNames: [
                                MENU_ITEM_CLASSNAME,
                                MENU_ITEM_CLASSNAME + "__Icon",
                                MENU_ITEM_CLASSNAME + "__" + menuItem.key
                            ],
                            innerHTML: getIconSvg(menuItem.icon),
                            attrs: {
                                title: labels[menuItem.i18nKey]
                            }
                        };
                        var menuItemView = new MenuItemView(menuItem, editorView, spec);
                        var _a = menuItemView.render(), update = _a.update, dom = _a.dom;
                        menuDom.appendChild(dom);
                        updates.push(update);
                    }
                }
                if (isLastMenuItem && !isLastMenuGroup) {
                    var seperatorDom = getSeperatorDom();
                    menuDom.appendChild(seperatorDom);
                }
            });
        });
        var combinedUpdates = flatDeep(updates, Infinity);
        return {
            update: function (state) {
                combinedUpdates.forEach(function (update) {
                    update(state);
                });
            }
        };
    };

    var MenuBarView = /** @class */ (function () {
        function MenuBarView(editorView, options) {
            // const menu = getMenu(toolbar);
            this.view = editorView;
            this.options = options;
            this.render();
            this.update();
        }
        MenuBarView.prototype.render = function () {
            var menuDom = document.createElement('div');
            menuDom.className = 'NgxEditor-MenuBar';
            var update = renderMenu(this.options, this.view, menuDom).update;
            this.updateMenuItems = update;
            this.view.dom.parentNode.insertBefore(menuDom, this.view.dom);
        };
        MenuBarView.prototype.update = function () {
            this.updateMenuItems(this.view.state);
        };
        return MenuBarView;
    }());

    var DEFAULT_TOOLBAR = [
        ['bold', 'italic'],
        ['code'],
        ['ordered_list', 'bullet_list'],
        [{ heading: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'] }]
    ];
    var DEFAULT_LABELS = {
        bold: 'Bold',
        italics: 'Italics',
        code: 'Code',
        ordered_list: 'Ordered List',
        bullet_list: 'Bullet List',
        heading: 'Heading'
    };
    var DEFAULT_OPTIONS = {
        toolbar: DEFAULT_TOOLBAR,
        labels: DEFAULT_LABELS
    };
    function menuPlugin(options) {
        return new prosemirrorState.Plugin({
            key: new prosemirrorState.PluginKey('menu'),
            view: function (editorView) {
                return new MenuBarView(editorView, options);
            },
        });
    }
    var menu = function (options) {
        if (options === void 0) { options = DEFAULT_OPTIONS; }
        return menuPlugin(options);
    };
    var ɵ0$2 = menu;

    var DEFAULT_PLACEHOLDER = 'Type Here...';
    function placeholderPlugin(text) {
        if (text === void 0) { text = DEFAULT_PLACEHOLDER; }
        return new prosemirrorState.Plugin({
            key: new prosemirrorState.PluginKey('placeholder'),
            props: {
                decorations: function (state) {
                    var doc = state.doc;
                    if (doc.childCount === 1 && doc.firstChild.isTextblock && doc.firstChild.content.size === 0) {
                        var placeHolderEl = document.createElement('span');
                        placeHolderEl.classList.add('NgxEditor-Placeholder');
                        placeHolderEl.textContent = text;
                        return prosemirrorView.DecorationSet.create(doc, [prosemirrorView.Decoration.widget(1, placeHolderEl)]);
                    }
                    return prosemirrorView.DecorationSet.empty;
                }
            }
        });
    }

    var NgxEditorServiceConfig = /** @class */ (function () {
        function NgxEditorServiceConfig() {
            this.plugins = [
                menu(),
                placeholderPlugin()
            ];
        }
        NgxEditorServiceConfig.ɵprov = core.ɵɵdefineInjectable({ factory: function NgxEditorServiceConfig_Factory() { return new NgxEditorServiceConfig(); }, token: NgxEditorServiceConfig, providedIn: "root" });
        NgxEditorServiceConfig = __decorate([
            core.Injectable({
                providedIn: 'root'
            })
        ], NgxEditorServiceConfig);
        return NgxEditorServiceConfig;
    }());
    var NgxEditorService = /** @class */ (function () {
        function NgxEditorService(config) {
            this.config = config;
        }
        NgxEditorService.ctorParameters = function () { return [
            { type: NgxEditorServiceConfig, decorators: [{ type: core.Optional }] }
        ]; };
        NgxEditorService.ɵprov = core.ɵɵdefineInjectable({ factory: function NgxEditorService_Factory() { return new NgxEditorService(core.ɵɵinject(NgxEditorServiceConfig, 8)); }, token: NgxEditorService, providedIn: "root" });
        NgxEditorService = __decorate([
            core.Injectable({
                providedIn: 'root'
            }),
            __param(0, core.Optional())
        ], NgxEditorService);
        return NgxEditorService;
    }());
    function provideMyServiceOptions(config) {
        return (config);
    }

    var NgxEditorComponent = /** @class */ (function () {
        function NgxEditorComponent(ngxEditorService) {
            this.config = ngxEditorService.config;
        }
        NgxEditorComponent_1 = NgxEditorComponent;
        NgxEditorComponent.prototype.writeValue = function (value) {
            if (!value) {
                return;
            }
            this.updateContent(value);
        };
        NgxEditorComponent.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        NgxEditorComponent.prototype.registerOnTouched = function () { };
        NgxEditorComponent.prototype.parseDoc = function (contentJson) {
            return schema.nodeFromJSON(contentJson);
        };
        NgxEditorComponent.prototype.updateContent = function (value) {
            try {
                var doc = this.parseDoc(value);
                var state = this.view.state;
                var tr = state.tr;
                tr.replaceWith(0, state.doc.content.size, doc);
                this.view.dispatch(tr);
            }
            catch (err) {
                console.error('Unable to update document.', err);
            }
        };
        NgxEditorComponent.prototype.handleTransactions = function (tr) {
            var state = this.view.state.applyTransaction(tr).state;
            this.view.updateState(state);
            if (tr.docChanged) {
                var json = state.doc.toJSON();
                this.onChange(json);
            }
        };
        NgxEditorComponent.prototype.createEditor = function () {
            this.view = new prosemirrorView.EditorView(this.ngxEditor.nativeElement, {
                state: prosemirrorState.EditorState.create({
                    schema: schema,
                    plugins: this.config.plugins,
                }),
                dispatchTransaction: this.handleTransactions.bind(this),
                attributes: {
                    class: 'NgxEditor-Content'
                },
            });
        };
        NgxEditorComponent.prototype.ngOnInit = function () {
            this.createEditor();
        };
        NgxEditorComponent.prototype.ngOnDestroy = function () {
            this.view.destroy();
        };
        var NgxEditorComponent_1;
        NgxEditorComponent.ctorParameters = function () { return [
            { type: NgxEditorService }
        ]; };
        __decorate([
            core.ViewChild('ngxEditor', { static: true })
        ], NgxEditorComponent.prototype, "ngxEditor", void 0);
        NgxEditorComponent = NgxEditorComponent_1 = __decorate([
            core.Component({
                selector: 'ngx-editor',
                template: "<div class=\"NgxEditor-Wrapper\" #ngxEditor></div>\n",
                providers: [{
                        provide: forms.NG_VALUE_ACCESSOR,
                        useExisting: core.forwardRef(function () { return NgxEditorComponent_1; }),
                        multi: true
                    }],
                encapsulation: core.ViewEncapsulation.None,
                styles: [".ProseMirror{outline:0}.NgxEditor-Wrapper{background:padding-box #fff;color:#000;border-radius:4px;border:2px solid rgba(0,0,0,.2)}.NgxEditor-MenuBar{display:flex;padding:.2rem;border-bottom:1px solid #ddd}.NgxEditor-MenuBar .NgxEditor-MenuItem{display:flex;align-items:center;justify-content:center}.NgxEditor-MenuBar .NgxEditor-MenuItem:hover{cursor:pointer;background-color:#f1f1f1}.NgxEditor-MenuBar .NgxEditor-MenuItem.NgxEditor-MenuItem__Icon{height:30px;width:30px;transition:.3s ease-in-out;border-radius:2px;margin-right:2px}.NgxEditor-MenuBar .NgxEditor-MenuItem.NgxEditor-MenuItem__Icon.NgxEditor-MenuItem__Active{background-color:#e8f0fe}.NgxEditor-MenuBar .NgxEditor-MenuItem.NgxEditor-MenuItem__Icon.NgxEditor-MenuItem__Active svg{fill:#1a73e8}.NgxEditor-MenuBar .NgxEditor-MenuItem.NgxEditor-MenuItem__Dropdown-Wrapper{position:relative;max-width:100px;width:100%;justify-content:start}.NgxEditor-MenuBar .NgxEditor-MenuItem.NgxEditor-MenuItem__Dropdown-Wrapper .NgxEditor-MenuItem__Dropdown{display:flex;align-items:center;width:100%}.NgxEditor-MenuBar .NgxEditor-MenuItem.NgxEditor-MenuItem__Dropdown-Wrapper .NgxEditor-MenuItem__Dropdown .NgxEditor-MenuItem__Dropdown-Text{margin-left:5px}.NgxEditor-MenuBar .NgxEditor-MenuItem.NgxEditor-MenuItem__Dropdown-Wrapper .NgxEditor-MenuItem__Dropdown .NgxEditor-MenuItem__Dropdown-Icon{margin-left:auto;position:relative;top:2px}.NgxEditor-MenuBar .NgxEditor-MenuItem.NgxEditor-MenuItem__Dropdown-Wrapper .NgxEditor-MenuItem__Dropdown-Menu{position:absolute;left:0;top:30px;box-shadow:rgba(60,64,67,.15) 0 2px 6px 2px;border-radius:4px;background-color:#fff;display:none}.NgxEditor-MenuBar .NgxEditor-MenuItem.NgxEditor-MenuItem__Dropdown-Wrapper .NgxEditor-MenuItem__Dropdown-Menu .NgxEditor-MenuItem__Dropdown-Item{cursor:pointer;padding:.5rem 1rem;white-space:nowrap}.NgxEditor-MenuBar .NgxEditor-MenuItem.NgxEditor-MenuItem__Dropdown-Wrapper .NgxEditor-MenuItem__Dropdown-Menu .NgxEditor-MenuItem__Dropdown-Item.NgxEditor-MenuItem__active,.NgxEditor-MenuBar .NgxEditor-MenuItem.NgxEditor-MenuItem__Dropdown-Wrapper .NgxEditor-MenuItem__Dropdown-Menu .NgxEditor-MenuItem__Dropdown-Item:hover{background-color:#f1f1f1}.NgxEditor-MenuBar .NgxEditor-MenuItem.NgxEditor-MenuItem__Dropdown-Wrapper.NgxEditor-MenuItem__Dropdown-Wrapper-Open,.NgxEditor-MenuBar .NgxEditor-MenuItem.NgxEditor-MenuItem__Dropdown-Wrapper.NgxEditor-MenuItem__Dropdown-Wrapper-Selected{background-color:#e8f0fe;color:#1a73e8}.NgxEditor-MenuBar .NgxEditor-MenuItem.NgxEditor-MenuItem__Dropdown-Wrapper.NgxEditor-MenuItem__Dropdown-Wrapper-Open .NgxEditor-MenuItem__Dropdown-Icon svg{fill:#1a73e8}.NgxEditor-MenuBar .NgxEditor-MenuItem.NgxEditor-MenuItem__Dropdown-Wrapper.NgxEditor-MenuItem__Dropdown-Wrapper-Open .NgxEditor-MenuItem__Dropdown-Menu{display:block;color:initial}.NgxEditor-MenuBar .NgxEditor-MenuItem__Seperator{border-left:1px solid #ccc;margin:0 5px}.NgxEditor-Content{padding:.5rem;white-space:pre-wrap}.NgxEditor-Content p{margin:0 0 .7rem}.NgxEditor-Placeholder{color:#6c757d;opacity:1}"]
            })
        ], NgxEditorComponent);
        return NgxEditorComponent;
    }());

    var NGX_EDITOR_CONFIG_TOKEN = new core.InjectionToken('NgxEditorConfig');
    var NgxEditorModule = /** @class */ (function () {
        function NgxEditorModule() {
        }
        NgxEditorModule_1 = NgxEditorModule;
        NgxEditorModule.forRoot = function (config) {
            return {
                ngModule: NgxEditorModule_1,
                providers: [
                    {
                        provide: NGX_EDITOR_CONFIG_TOKEN,
                        useValue: config
                    },
                    {
                        provide: NgxEditorServiceConfig,
                        useFactory: provideMyServiceOptions,
                        deps: [NGX_EDITOR_CONFIG_TOKEN]
                    }
                ]
            };
        };
        var NgxEditorModule_1;
        NgxEditorModule = NgxEditorModule_1 = __decorate([
            core.NgModule({
                declarations: [NgxEditorComponent],
                exports: [NgxEditorComponent],
            })
        ], NgxEditorModule);
        return NgxEditorModule;
    }());

    exports.NgxEditorComponent = NgxEditorComponent;
    exports.NgxEditorModule = NgxEditorModule;
    exports.isMarkActive = isMarkActive;
    exports.isNodeActive = isNodeActive;
    exports.menu = menu;
    exports.placeholder = placeholderPlugin;
    exports.schema = schema;
    exports.toggleBlockType = toggleBlockType;
    exports.toggleList = toggleList;
    exports.ɵa = NgxEditorServiceConfig;
    exports.ɵb = NgxEditorService;
    exports.ɵc = provideMyServiceOptions;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-editor.umd.js.map
